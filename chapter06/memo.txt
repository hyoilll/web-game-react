Array().fill()
 Array() 만큼의 배열을 fill() 함수로 채워줌 공백은 undefined

Array().map()
 각 요소에 대해서 콜백함수를 실행

Array().fill().map()
 fill()로 채운 undefined자리에 map()을 이용해서 값을 채워줌

---------------------------

가장 하위 컴포넌트는 처음부터 PureComponent로 해도 됨 (데이터가 없음)
아니면 state를 안쓰면 그냥 함수컴포넌트로 작성

high order component - memo

---------------------------

react hooks
[참고]https://ko.reactjs.org/docs/hooks-reference.html#usememo

useMemo
 함수 컴포넌트는 state가 바뀌면 함수컴포넌트 자체가 재실행 되버리기 때문에
 const [winNumbers, setWinNumbers] = useState(getWinNumbers());
 처럼 함수가 계속해서 재실행될 수 있음. 그럼 성능상 매우 안좋음
 그래서 나온게 useMemo임. 기존에 실행했던 값을 기억하고 있음
 그래서 getWinNumbers()를 한번만 실행하게 됨

 const lottoNumbers = useMemo(() => getWinNumbers(), []);
 const [winNumbers, setWinNumbers] = useState(lottoNumbers);

useMemo VS useRef
 1. useMemo
  복잡한 함수 결과값을 기억
 
 2. useRef
  일반 값을 기억(타이머 같은)

----------------------------

useCallback
 함수컴포넌트가 재실행되면 안에 있는 함수까지 재생성된다.
 그렇게되면 짧은 함수는 괜찮겠지만 크기가 큰 함수는 좀 무리가 된다.
 그래서 static같이 동작하는 useCallback을 사용함
 처음 함수를 생성할 때 그 생성된 함수 자체를 기억하고 있는 것.

useCallback를 무조건 써줘야하는 경우
 자식 컴포넌트로 함수를 props로 보낼 때
 ex) <Ball number={bonus} onClick={onClick}>
 useCallback없이 onClick함수를 실행할 때마다 자식에게 보내면 
 자식은 매번 새로운 함수로 받아드림. 그렇기 때문에 매번 
 새로 랜더링을 함 => 성능악화

useMemo VS useCallback

 1. useMemo
  콜백함수의 리턴값을 기억하고 있는 것
  두번째 배열의 요소값이 바뀌면 콜백함수가 실행되서 리턴값도 바뀜

 2. useCallback
  콜백함수 자체를 기억하고 있는 것
  약간 static같은듯?
  함수 선언(생성)자체가 오래걸리면 함수자체를 처음에 기억하게 해버림
  두번째 배열의 요소값이 바뀌면 콜백함수를 다시 생성해서 다시 기억함

---------------------------

hooks는 조건문안에 절대 넣으면 안되고, 함수나 반복문안에도 넣지 말아라
실행순서가 중요함

---------------------------

useEffect()는 componentDidMount는 무조건 실행되고, 두번째 배열 요소에
따라서 componentDidUpdate가 실행되냐 안되냐가 달라짐
여기서 componentDidMount는 실행안하고, componentDidUpdate만 실행
하고 싶으면, 이렇게 할 수 있음

const mounted = useRef(false);
useEffect(() => {
    if (!mounted.current)
    {
        mounted.current = true;
    }
    else
    {
        ...
    }
}, [changeValue]);

---------------------------

componentDidMount만 실행되게하는 것

useEffect(() => {
    ...
},[])