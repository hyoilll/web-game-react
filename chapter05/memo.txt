class로 만들 떄 처음에는 Component로 시작해라
그 후에 render이 너무 과하면 PureComponent로 하던지 함수로 하던지

----------------------------------------------------------------

// [참조] https://medium.com/@krpeppermint100/js-useeffect%EB%A5%BC-%ED%86%B5%ED%95%9C-react-hooks%EC%9D%98-lifecycle-%EA%B4%80%EB%A6%AC-3a65844bcaf8
// hooks는 없지만 흉내는 낼 수 있음 => useffect()
// => constructor(+사용자 함수) -> First render -> ref -> componentDidMount
// -> (setState/props 변경 시) -> shouldComponentUpdate(return true) -> Re render
// -> componentDidUpdate -> (부모가 자식컴포넌트 없앴을 때) -> componentWillUnmount -> 소멸

// ----------component life cycle----------------

  //render가 처음 성공적으로 실행되고, 이 함수가 실행 됨
  //그 후 setState로 인해 reRender가 일어날 떄는 실행 안됨
  componentDidMount() {}

  //reRender 후에는 이 함수가 실행 됨
  componentDidUpdate() {}

  //컴포넌트가 제거되는 경우, 제거되기 직전에 실행됨
  //componentDidMount에서 작업했던 것을 제거 하는 용도
  componentWillUnmount() {}

----------고차함수(Higher-Order Components)-----------------------------

button의 onClick 최적화를 위해 이렇게 바꿔줌 function = () => () => {}
onClick = {function} 함수를 넣어줘야하는데 ('바위') 매개변수 때문에 함수가 아닌
실행결과를 넣어주게 됨 onClick = {function()}
onClick = {() => this.onClick('바위')} 최적화 전
onClick = {this.onClick('바위')} 최적화 후

onClick = (c) => (event) => {}